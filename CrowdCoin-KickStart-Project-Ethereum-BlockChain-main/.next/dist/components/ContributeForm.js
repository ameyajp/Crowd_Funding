'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\Crowd_kickstart_app\\CrowdCoin-KickStart-Project-Ethereum-BlockChain-main\\components\\ContributeForm.js';


var ContributeForm = function (_Component) {
    (0, _inherits3.default)(ContributeForm, _Component);

    function ContributeForm() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, ContributeForm);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ContributeForm.__proto__ || (0, _getPrototypeOf2.default)(ContributeForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            value: '',
            errorMessage: '',
            loading: false
        }, _this.onSubmit = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
                var campaign, accounts;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                event.preventDefault();

                                campaign = (0, _campaign2.default)(_this.props.address);

                                _this.setState({ loading: true, errorMessage: '' });

                                _context.prev = 3;
                                _context.next = 6;
                                return _web2.default.eth.getAccounts();

                            case 6:
                                accounts = _context.sent;
                                _context.next = 9;
                                return campaign.methods.contribute().send({
                                    from: accounts[0],
                                    value: _web2.default.utils.toWei(_this.state.value, 'ether')
                                });

                            case 9:

                                _routes.Router.replaceRoute('/campaigns/' + _this.props.address);
                                _context.next = 15;
                                break;

                            case 12:
                                _context.prev = 12;
                                _context.t0 = _context['catch'](3);

                                _this.setState({ errorMessage: _context.t0.message });

                            case 15:

                                _this.setState({ loading: false, value: '' });

                            case 16:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2, [[3, 12]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(ContributeForm, [{
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 38
                }
            }, _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            }, 'Amount to Contribute'), _react2.default.createElement(_semanticUiReact.Input, {
                value: this.state.value,
                onChange: function onChange(event) {
                    return _this3.setState({ value: event.target.value });
                },
                label: 'ether',
                labelPosition: 'right',
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 49
                }
            }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 50
                }
            }, 'Contribute!'));
        }
    }]);

    return ContributeForm;
}(_react.Component);

exports.default = ContributeForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ29udHJpYnV0ZUZvcm0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInZhbHVlIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsIm9uU3VibWl0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsImV2ZW50IiwiY2FtcGFpZ24iLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInByb3BzIiwiYWRkcmVzcyIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNvbnRyaWJ1dGUiLCJzZW5kIiwiZnJvbSIsInV0aWxzIiwidG9XZWkiLCJyZXBsYWNlUm91dGUiLCJ0MCIsIm1lc3NhZ2UiLCJzdG9wIiwiX3giLCJrZXkiLCJyZW5kZXIiLCJfdGhpczMiLCJjcmVhdGVFbGVtZW50IiwiZXJyb3IiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIkZpZWxkIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJsYWJlbCIsImxhYmVsUG9zaXRpb24iLCJoZWFkZXIiLCJjb250ZW50IiwicHJpbWFyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUxBLElBQUlBLGVBQWUsOEdBQW5COzs7QUFPQSxJQUFJQyxpQkFBaUIsVUFBVUMsVUFBVixFQUFzQjtBQUN2Qyw0QkFBVUQsY0FBVixFQUEwQkMsVUFBMUI7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