"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Layout = require("../../components/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require("../../ethereum/campaign");

var _campaign2 = _interopRequireDefault(_campaign);

var _semanticUiReact = require("semantic-ui-react");

var _web = require("../../ethereum/web3");

var _web2 = _interopRequireDefault(_web);

var _ContributeForm = require("../../components/ContributeForm");

var _ContributeForm2 = _interopRequireDefault(_ContributeForm);

var _routes = require("../../routes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = "E:\\Crowd_kickstart_app\\CrowdCoin-KickStart-Project-Ethereum-BlockChain-main\\pages\\campaigns\\show.js?entry";


var CampaignShow = function (_Component) {
    (0, _inherits3.default)(CampaignShow, _Component);

    function CampaignShow() {
        (0, _classCallCheck3.default)(this, CampaignShow);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignShow.__proto__ || (0, _getPrototypeOf2.default)(CampaignShow)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignShow, [{
        key: "renderCards",
        value: function renderCards() {
            var _props = this.props,
                balance = _props.balance,
                manager = _props.manager,
                minimumContribution = _props.minimumContribution,
                requestsCount = _props.requestsCount,
                approversCount = _props.approversCount;

            var items = [{
                header: manager,
                meta: 'Address of Manager',
                description: 'The manager created this campaign and can create requests to withdraw money',
                style: { overflowWrap: 'break-word' }
            }, {
                header: minimumContribution,
                meta: 'Minimum Contribution (wei)',
                description: 'You must contribute at least this much wei to become an approver'
            }, {
                header: requestsCount,
                meta: 'Number of Requests',
                description: 'A request tries to withdraw money from the contract. Requests must be approved by approvers'
            }, {
                header: approversCount,
                meta: 'Number of Approvers',
                description: 'Number of people who have already donated to this campaign'
            }, {
                header: _web2.default.utils.fromWei(balance, 'ether'),
                meta: 'Campaign Balance (ether)',
                description: 'The balance is how much money this campaign has left to spend.'
            }];

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 69
                }
            });
        }
    }, {
        key: "render",
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 74
                }
            }, _react2.default.createElement("h3", {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 75
                }
            }, "Campaign Show"), _react2.default.createElement(_semanticUiReact.Grid, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 76
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 77
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 78
                }
            }, this.renderCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 80
                }
            }, _react2.default.createElement(_ContributeForm2.default, { address: this.props.address, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 81
                }
            }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 85
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 86
                }
            }, _react2.default.createElement(_routes.Link, { route: "/campaigns/" + this.props.address + "/requests", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                }
            }, _react2.default.createElement("a", {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 88
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 89
                }
            }, "View Requests")))))));
        }
    }], [{
        key: "getInitialProps",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var campaign, summary;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                campaign = (0, _campaign2.default)(props.query.address);
                                _context.next = 3;
                                return campaign.methods.getSummary().call();

                            case 3:
                                summary = _context.sent;
                                return _context.abrupt("return", {
                                    address: props.query.address,
                                    minimumContribution: summary[0],
                                    balance: summary[1],
                                    requestsCount: summary[2],
                                    approversCount: summary[3],
                                    manager: summary[4]
                                });

                            case 5:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignShow;
}(_react.Component);

exports.default = CampaignShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25TaG93IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYXJkcyIsIl9wcm9wcyIsInByb3BzIiwiYmFsYW5jZSIsIm1hbmFnZXIiLCJtaW5pbXVtQ29udHJpYnV0aW9uIiwicmVxdWVzdHNDb3VudCIsImFwcHJvdmVyc0NvdW50IiwiaXRlbXMiLCJoZWFkZXIiLCJtZXRhIiwiZGVzY3JpcHRpb24iLCJzdHlsZSIsIm92ZXJmbG93V3JhcCIsInV0aWxzIiwiZnJvbVdlaSIsImNyZWF0ZUVsZW1lbnQiLCJHcm91cCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJhZGRyZXNzIiwicm91dGUiLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJzdW1tYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFN1bW1hcnkiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLGdIQUFuQjs7O0FBU0EsSUFBSUMsZUFBZSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3JDLDRCQUFVRCxZQUFWLEVBQXdCQyxVQUF4Qjs7QUFFQSxhQUFTRCxZQUFULEdBQXdCO0FBQ3BCLHNDQUFnQixJQUFoQixFQUFzQkEsWUFBdEI7O0FBRUEsZUFBTyx5Q0FBMkIs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